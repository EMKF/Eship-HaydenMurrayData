# NETS2017_Misc.txt - use 'firstyear' as business age
# NETS2017_Emp.txt - emp90 and empc90 tells you employees in business in 1990

import pandas as pd
import time
import numpy as np
import sys
import NETS.constants as c

pd.set_option('max_columns', 1000)
pd.set_option('max_info_columns', 1000)
pd.set_option('expand_frame_repr', False)
pd.set_option('display.max_rows', 30000)
pd.set_option('max_colwidth', 4000)
pd.set_option('display.float_format', lambda x: '%.4f' % x)
pd.options.mode.chained_assignment = None

# time
start = time.time()

# writer
writer = pd.ExcelWriter('/Users/hmurray/Desktop/data/general_content/vulnerability/self_emp_closures_vulnerability.xlsx', engine='xlsxwriter')

def data_create():
    # pull from s3
    return pd.read_csv('/Users/hmurray/Desktop/data/general_content/covid_bus_pulse_SHED_fin_means/jessica/data/raw_gsg_6.3.csv')
    print(df.head())


def feature_change(df):
    df = df[['Q2', 'Q56_15_1', 'Q4', 'Q7', 'Q10', 'Q62', 'WEIGHT']]
    df.rename(columns={'Q4': 'AGE'}, inplace=True)
    # rename Q2, Q4, Q10, Q62, and Q56_15_1
    df['Q2'] = df['Q2'].astype(str).replace(str(1), 'Still in business').\
        replace(str(2), 'It has closed')
    df["AGE"].replace({1: "NEW", 2: "YOUNG", 3: "YOUNG", 4: "YOUNG", 5: "YOUNG", 6: "MATURE", 7: "MATURE"}, inplace=True)
    df['Q10'] = df['Q10'].astype(str).replace(str(1), 'Under $10,000').\
        replace(str(2), '$10,000 to $49,999').\
        replace(str(3), '$50,000 to $99,999').\
        replace(str(4), '$100,000 to $499,999').\
        replace(str(5), '$500,000 to $999,999').\
        replace(str(6), '$1,000,000 to $1,999,999').\
        replace(str(7), '$2,000,000 to $4,999,999').\
        replace(str(8), '$5,000,000 to $24,999,999').\
        replace(str(9), '$25,000,000 to $49,999,999').\
        replace(str(10), 'Over $50,000,000')
    df['Q62'] = df['Q62'].astype(str).replace(str(1), 'I am the sole provider in my household').\
        replace(str(2), 'More than half of my household finances usually come from me').\
        replace(str(3), 'About half of my household finances usually come from me').\
        replace(str(4), 'Less than half of my household finances usually come from me').\
        replace(str(5), 'I do not contribute to household finances')
    df['Q56_15_1'] = df['Q56_15_1'].astype(str).replace(str(1), 'temp_closed').\
        replace(str(0), 'I do not contribute to household finances')
    # recreate employee structure categories
    df['full_time'] = df['Q7']
    # recode number of workers
    structure_list = ['full_time']
    for x in structure_list:
        df[x] = df[x].astype(str).replace(str(1), '1 Just myself and co-owners, no other employees').replace(str(2), '2 1-10') \
            .replace(str(3), '3-5 10+').replace(str(4), '3-5 10+').replace(str(5), '3-5 10+')
    # subset by full_time, Just myself and co-owners, no other employees
    df = df[df['full_time'] == '1 Just myself and co-owners, no other employees']
    df = df.reset_index(drop=True)
    return df

def ctabber(df):
    # weighted self-emp closures
    closures_self_emp = pd.crosstab(df['full_time'], df['Q56_15_1'], values=df['WEIGHT'], aggfunc='sum', normalize='index', margins=True)
    print(closures_self_emp)
    closures_self_emp.to_excel(writer, sheet_name=str('closures_self_emp'), index=True)
    # weighted self-emp earnings
    earn_self_emp = pd.crosstab(df['Q10'], df['full_time'], values=df['WEIGHT'], aggfunc='sum', normalize='columns', margins=False)
    print(earn_self_emp)
    earn_self_emp.to_excel(writer, sheet_name=str('earn_self_emp'), index=True)
    # weighted self-emp earnings by household status
    house_self_emp = pd.crosstab(df['Q10'], df['Q62'], values=df['WEIGHT'], aggfunc='sum', normalize='all', margins=False)
    print(house_self_emp)
    house_self_emp.to_excel(writer, sheet_name=str('house_self_emp'), index=True)
    return df


if __name__ == '__main__':
    df = data_create()
    df = feature_change(df)
    df = ctabber(df)
    print(df.head())
    # data_out(df_temp)


writer.close()
sys.exit()